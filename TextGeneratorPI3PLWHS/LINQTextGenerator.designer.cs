#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TextGeneratorPI3PLWHS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBTextGenerator")]
	public partial class LINQTextGeneratorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGeneralInfo(GeneralInfo instance);
    partial void UpdateGeneralInfo(GeneralInfo instance);
    partial void DeleteGeneralInfo(GeneralInfo instance);
    #endregion
		
		public LINQTextGeneratorDataContext() : 
				base(global::TextGeneratorPI3PLWHS.Properties.Settings.Default.DBTextGeneratorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQTextGeneratorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQTextGeneratorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQTextGeneratorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQTextGeneratorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GeneralInfo> GeneralInfos
		{
			get
			{
				return this.GetTable<GeneralInfo>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GeneralInfo_Insert")]
		public int GeneralInfo_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SiteName", DbType="VarChar(100)")] string siteName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(100)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PlantCode", DbType="VarChar(100)")] string plantCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SLOC", DbType="VarChar(100)")] string sLOC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CityCode", DbType="VarChar(100)")] string cityCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerNumber", DbType="VarChar(100)")] string partnerNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompleteAddress", DbType="VarChar(MAX)")] string completeAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GLNILN", DbType="VarChar(100)")] string gLNILN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServerHostURL", DbType="VarChar(MAX)")] string serverHostURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AS2ID", DbType="VarChar(100)")] string aS2ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SSLCertificate", DbType="Bit")] System.Nullable<bool> sSLCertificate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), siteName, country, plantCode, sLOC, cityCode, partnerNumber, completeAddress, gLNILN, serverHostURL, aS2ID, sSLCertificate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GeneralInfo_Update")]
		public int GeneralInfo_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SiteName", DbType="VarChar(100)")] string siteName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(100)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PlantCode", DbType="VarChar(100)")] string plantCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SLOC", DbType="VarChar(100)")] string sLOC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CityCode", DbType="VarChar(100)")] string cityCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PartnerNumber", DbType="VarChar(100)")] string partnerNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompleteAddress", DbType="VarChar(MAX)")] string completeAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GLNILN", DbType="VarChar(100)")] string gLNILN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServerHostURL", DbType="VarChar(MAX)")] string serverHostURL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AS2ID", DbType="VarChar(100)")] string aS2ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SSLCertificate", DbType="Bit")] System.Nullable<bool> sSLCertificate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), siteName, country, plantCode, sLOC, cityCode, partnerNumber, completeAddress, gLNILN, serverHostURL, aS2ID, sSLCertificate);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneralInfo")]
	public partial class GeneralInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SiteName;
		
		private string _Country;
		
		private string _PlantCode;
		
		private string _SLOC;
		
		private string _CityCode;
		
		private string _PartnerNumber;
		
		private string _CompleteAddress;
		
		private string _GLNILN;
		
		private string _ServerHostURL;
		
		private string _AS2ID;
		
		private System.Nullable<bool> _SSLCertificate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPlantCodeChanging(string value);
    partial void OnPlantCodeChanged();
    partial void OnSLOCChanging(string value);
    partial void OnSLOCChanged();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    partial void OnPartnerNumberChanging(string value);
    partial void OnPartnerNumberChanged();
    partial void OnCompleteAddressChanging(string value);
    partial void OnCompleteAddressChanged();
    partial void OnGLNILNChanging(string value);
    partial void OnGLNILNChanged();
    partial void OnServerHostURLChanging(string value);
    partial void OnServerHostURLChanged();
    partial void OnAS2IDChanging(string value);
    partial void OnAS2IDChanged();
    partial void OnSSLCertificateChanging(System.Nullable<bool> value);
    partial void OnSSLCertificateChanged();
    #endregion
		
		public GeneralInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantCode", DbType="VarChar(100)")]
		public string PlantCode
		{
			get
			{
				return this._PlantCode;
			}
			set
			{
				if ((this._PlantCode != value))
				{
					this.OnPlantCodeChanging(value);
					this.SendPropertyChanging();
					this._PlantCode = value;
					this.SendPropertyChanged("PlantCode");
					this.OnPlantCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SLOC", DbType="VarChar(100)")]
		public string SLOC
		{
			get
			{
				return this._SLOC;
			}
			set
			{
				if ((this._SLOC != value))
				{
					this.OnSLOCChanging(value);
					this.SendPropertyChanging();
					this._SLOC = value;
					this.SendPropertyChanged("SLOC");
					this.OnSLOCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityCode", DbType="VarChar(100)")]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerNumber", DbType="VarChar(100)")]
		public string PartnerNumber
		{
			get
			{
				return this._PartnerNumber;
			}
			set
			{
				if ((this._PartnerNumber != value))
				{
					this.OnPartnerNumberChanging(value);
					this.SendPropertyChanging();
					this._PartnerNumber = value;
					this.SendPropertyChanged("PartnerNumber");
					this.OnPartnerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteAddress", DbType="VarChar(MAX)")]
		public string CompleteAddress
		{
			get
			{
				return this._CompleteAddress;
			}
			set
			{
				if ((this._CompleteAddress != value))
				{
					this.OnCompleteAddressChanging(value);
					this.SendPropertyChanging();
					this._CompleteAddress = value;
					this.SendPropertyChanged("CompleteAddress");
					this.OnCompleteAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GLNILN", DbType="VarChar(100)")]
		public string GLNILN
		{
			get
			{
				return this._GLNILN;
			}
			set
			{
				if ((this._GLNILN != value))
				{
					this.OnGLNILNChanging(value);
					this.SendPropertyChanging();
					this._GLNILN = value;
					this.SendPropertyChanged("GLNILN");
					this.OnGLNILNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerHostURL", DbType="VarChar(MAX)")]
		public string ServerHostURL
		{
			get
			{
				return this._ServerHostURL;
			}
			set
			{
				if ((this._ServerHostURL != value))
				{
					this.OnServerHostURLChanging(value);
					this.SendPropertyChanging();
					this._ServerHostURL = value;
					this.SendPropertyChanged("ServerHostURL");
					this.OnServerHostURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AS2ID", DbType="VarChar(100)")]
		public string AS2ID
		{
			get
			{
				return this._AS2ID;
			}
			set
			{
				if ((this._AS2ID != value))
				{
					this.OnAS2IDChanging(value);
					this.SendPropertyChanging();
					this._AS2ID = value;
					this.SendPropertyChanged("AS2ID");
					this.OnAS2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSLCertificate", DbType="Bit")]
		public System.Nullable<bool> SSLCertificate
		{
			get
			{
				return this._SSLCertificate;
			}
			set
			{
				if ((this._SSLCertificate != value))
				{
					this.OnSSLCertificateChanging(value);
					this.SendPropertyChanging();
					this._SSLCertificate = value;
					this.SendPropertyChanged("SSLCertificate");
					this.OnSSLCertificateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
